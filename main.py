import asyncio
import yaml
import time
from datetime import datetime
from bybit_api import BybitClient
from telegram_bot import TelegramNotifier
from logger import log_info

with open('config.yaml', 'r') as file:
    config = yaml.safe_load(file)

bybit = BybitClient(config['bybit']['api_key'], config['bybit']['api_secret'])
notifier = TelegramNotifier(config['telegram']['bot_token'], config['telegram']['chat_id'])

symbols_cache = {"symbols": [], "last_update": 0}
cache_ttl = 600  # 10 —Ö–≤–∏–ª–∏–Ω –∫–µ—à—É
prev_top = []

async def check_arbitrage():
    global prev_top

    # –ö—Ä–∞—Å–∏–≤–µ —Å—Ç–∞—Ä—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    start_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
    start_msg = (
        f"‚úÖ –ë–æ—Ç Bybit Arbitrage —É—Å–ø—ñ—à–Ω–æ –ó–ê–ü–£–©–ï–ù–û!\n\n"
        f"üîç –ü–æ—à—É–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –º—ñ–∂ —Å–ø–æ—Ç–æ–º —ñ —Ñ‚Äô—é—á–µ—Ä—Å–∞–º–∏ —Ä–æ–∑–ø–æ—á–∞—Ç–æ.\n"
        f"‚è∞ {start_time}\n\n"
        f"–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–±—Å—è–≥ —Ç–æ—Ä–≥—ñ–≤ (24h): {config['bybit'].get('min_volume', 100000)} USDT\n"
        f"–ë–∞–∂–∞—é –ø—Ä–∏–±—É—Ç–∫–æ–≤–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤! üöÄ"
    )
    await notifier.send_message(start_msg)
    log_info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")

    try:
        while True:
            print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ, —à—É–∫–∞—é –∞—Ä–±—ñ—Ç—Ä–∞–∂...")

            current_time = time.time()
            # --- –û—Ç—Ä–∏–º—É—î–º–æ –º–æ–Ω–µ—Ç–∏ –∑ –æ–±—Å—è–≥–æ–º > min_volume ---
            if current_time - symbols_cache["last_update"] > cache_ttl or not symbols_cache["symbols"]:
                symbols_cache["symbols"] = bybit.get_spot_symbols(config['bybit'].get('min_volume', 100000))
                symbols_cache["last_update"] = current_time
                log_info(f"–û–Ω–æ–≤–ª–µ–Ω–æ –∫–µ—à —Å–∏–º–≤–æ–ª—ñ–≤ ({len(symbols_cache['symbols'])})")
            symbols = symbols_cache["symbols"]

            results = []

            for symbol_data in symbols:
                symbol = symbol_data["symbol"]
                # volume = symbol_data["volume"]  # —è–∫—â–æ –∑–∞—Ö–æ—á–µ—à –¥–æ–¥–∞—Ç–∏ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                spot_price = bybit.get_price(symbol, category="spot")
                futures_price = bybit.get_price(symbol, category="linear")

                if spot_price and futures_price:
                    difference = abs(futures_price - spot_price) / spot_price * 100
                    if difference >= config['bybit']['arbitrage_difference']:
                        results.append({
                            "symbol": symbol,
                            "spot_price": spot_price,
                            "futures_price": futures_price,
                            "difference": difference,
                            "volume": symbol_data["volume"]
                        })
                await asyncio.sleep(0.1)

            top_results = sorted(results, key=lambda x: x['difference'], reverse=True)[:5]

            if top_results and top_results != prev_top:
                msg = "üö® –¢–û–ü-5 –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–Ω–µ—Ç –Ω–∞ Bybit:\n\n"
                for i, res in enumerate(top_results, start=1):
                    msg += (
                        f"{i}) {res['symbol']}\n"
                        f"   –°–ø–æ—Ç: {res['spot_price']}\n"
                        f"   –§'—é—á–µ—Ä—Å–∏: {res['futures_price']}\n"
                        f"   –†—ñ–∑–Ω–∏—Ü—è: {res['difference']:.2f}%\n"
                        f"   –û–±—Å—è–≥ 24h: {int(res['volume']):,} USDT\n\n"
                    )
                await notifier.send_message(msg)
                log_info(msg)
                prev_top = top_results.copy()
            elif not top_results:
                log_info("–ù–µ–º–∞—î –º–æ–Ω–µ—Ç —ñ–∑ –∞—Ä–±—ñ—Ç—Ä–∞–∂–µ–º –ø–æ–Ω–∞–¥ –ø–æ—Ä—ñ–≥")
                prev_top = []
            else:
                log_info("–¢–æ–ø-5 –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è ‚Äî –∞–ª–µ—Ä—Ç –Ω–µ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ")

            await asyncio.sleep(config['bybit']['request_interval'])

    except Exception as e:
        # –ê–≤–∞—Ä—ñ–π–Ω–∞ –∑—É–ø–∏–Ω–∫–∞ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
        stop_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
        error_msg = (
            f"‚õîÔ∏è –ë–æ—Ç Bybit Arbitrage –ó–£–ü–ò–ù–ï–ù–û!\n\n"
            f"üõë –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –≤–∏–º–∫–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É.\n"
            f"‚è∞ {stop_time}\n\n"
            f"–ü–æ–º–∏–ª–∫–∞: {str(e)}"
        )
        await notifier.send_message(error_msg)
        log_info(error_msg)
        raise

    except KeyboardInterrupt:
        # –†—É—á–Ω–∞ –∑—É–ø–∏–Ω–∫–∞
        stop_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
        stop_msg = (
            f"‚õîÔ∏è –ë–æ—Ç Bybit Arbitrage –ó–£–ü–ò–ù–ï–ù–û!\n\n"
            f"üõë –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –≤–∏–º–∫–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É.\n"
            f"‚è∞ {stop_time}\n\n"
            f"–ë–æ—Ç –∫–æ—Ä–µ–∫—Ç–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–æ –∑–∞ –∑–∞–ø–∏—Ç–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."
        )
        await notifier.send_message(stop_msg)
        log_info(stop_msg)

    finally:
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑—É–ø–∏–Ω–∫—É —É –±—É–¥—å-—è–∫–æ–º—É —Ä–∞–∑—ñ (—è–∫ —Ä–µ–∑–µ—Ä–≤)
        stop_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
        final_msg = (
            f"‚õîÔ∏è –ë–æ—Ç Bybit Arbitrage –ó–£–ü–ò–ù–ï–ù–û!\n\n"
            f"üõë –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –≤–∏–º–∫–Ω–µ–Ω–æ.\n"
            f"‚è∞ {stop_time}\n\n"
            f"–ü–µ—Ä–µ–≤—ñ—Ä —Ä–æ–±–æ—Ç—É, —è–∫—â–æ –∑—É–ø–∏–Ω–∫–∞ –±—É–ª–∞ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–æ—é!"
        )
        await notifier.send_message(final_msg)
        log_info(final_msg)

if __name__ == "__main__":
    asyncio.run(check_arbitrage())

