import asyncio
import yaml
from bybit_api import BybitClient
from telegram_bot import TelegramNotifier
from logger import log_info

with open('config.yaml', 'r') as file:
    config = yaml.safe_load(file)

bybit = BybitClient(config['bybit']['api_key'], config['bybit']['api_secret'])
notifier = TelegramNotifier(config['telegram']['bot_token'], config['telegram']['chat_id'])

async def check_arbitrage():
    while True:
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ, —à—É–∫–∞—é –∞—Ä–±—ñ—Ç—Ä–∞–∂...")

        symbols = bybit.get_spot_symbols()
        results = []

        for symbol in symbols:
            spot_price = bybit.get_price(symbol, category="spot")
            futures_price = bybit.get_price(symbol, category="linear")

            if spot_price and futures_price:
                difference = abs(futures_price - spot_price) / spot_price * 100
                if difference >= config['bybit']['arbitrage_difference']:
                    results.append({
                        "symbol": symbol,
                        "spot_price": spot_price,
                        "futures_price": futures_price,
                        "difference": difference
                    })
            await asyncio.sleep(0.1)  # –º—ñ–Ω—ñ–º—ñ–∑—É—î–º–æ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ API

        # –ó–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –¢–û–ü-5 –º–æ–Ω–µ—Ç –∑ –Ω–∞–π–±—ñ–ª—å—à–∏–º –∞—Ä–±—ñ—Ç—Ä–∞–∂–µ–º
        top_results = sorted(results, key=lambda x: x['difference'], reverse=True)[:5]

        if top_results:
            msg = "üö® –¢–û–ü-5 –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–Ω–µ—Ç –Ω–∞ Bybit:\n\n"
            for i, res in enumerate(top_results, start=1):
                msg += (
                    f"{i}) {res['symbol']}\n"
                    f"   –°–ø–æ—Ç: {res['spot_price']}\n"
                    f"   –§'—é—á–µ—Ä—Å–∏: {res['futures_price']}\n"
                    f"   –†—ñ–∑–Ω–∏—Ü—è: {res['difference']:.2f}%\n\n"
                )
            await notifier.send_message(msg)
            log_info(msg)
        else:
            log_info("–ù–µ–º–∞—î –º–æ–Ω–µ—Ç —ñ–∑ –∞—Ä–±—ñ—Ç—Ä–∞–∂–µ–º –ø–æ–Ω–∞–¥ –ø–æ—Ä—ñ–≥")

        await asyncio.sleep(config['bybit']['request_interval'])

if __name__ == "__main__":
    asyncio.run(check_arbitrage())
