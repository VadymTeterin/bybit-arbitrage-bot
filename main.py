import asyncio
import yaml
from datetime import datetime

from telegram_bot import TelegramNotifier
from logger import log_info
from cache.cache_manager import CacheManager
from utils.history_manager import HistoryManager
from formatters.message_formatter import format_exchange_report

from exchange_manager import ExchangeManager

# === –Ü–º–ø–æ—Ä—Ç –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –±–ª–æ–∫—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö –±—ñ—Ä–∂ ===
from arbitrage_blocks.bybit_arbitrage import get_spot_futures_arbitrage as bybit_arbitrage, get_margin_futures_arbitrage as bybit_margin_arbitrage
from arbitrage_blocks.binance_arbitrage import get_spot_futures_arbitrage as binance_arbitrage, get_margin_futures_arbitrage as binance_margin_arbitrage
from arbitrage_blocks.okx_arbitrage import get_spot_futures_arbitrage as okx_arbitrage, get_margin_futures_arbitrage as okx_margin_arbitrage
from arbitrage_blocks.kucoin_arbitrage import get_spot_futures_arbitrage as kucoin_arbitrage, get_margin_futures_arbitrage as kucoin_margin_arbitrage
from arbitrage_blocks.gateio_arbitrage import get_spot_futures_arbitrage as gateio_arbitrage, get_margin_futures_arbitrage as gateio_margin_arbitrage
from arbitrage_blocks.bingx_arbitrage import get_spot_futures_arbitrage as bingx_arbitrage, get_margin_futures_arbitrage as bingx_margin_arbitrage
from arbitrage_blocks.mexc_arbitrage import get_spot_futures_arbitrage as mexc_arbitrage, get_margin_futures_arbitrage as mexc_margin_arbitrage
from arbitrage_blocks.htx_arbitrage import get_spot_futures_arbitrage as htx_arbitrage, get_margin_futures_arbitrage as htx_margin_arbitrage

from exchanges.bybit_ws import BybitWSClient

ARBITRAGE_BLOCKS = {
    'bybit': (bybit_arbitrage, bybit_margin_arbitrage),
    'binance': (binance_arbitrage, binance_margin_arbitrage),
    'okx': (okx_arbitrage, okx_margin_arbitrage),
    'kucoin': (kucoin_arbitrage, kucoin_margin_arbitrage),
    'gateio': (gateio_arbitrage, gateio_margin_arbitrage),
    'bingx': (bingx_arbitrage, bingx_margin_arbitrage),
    'mexc': (mexc_arbitrage, mexc_margin_arbitrage),
    'htx': (htx_arbitrage, htx_margin_arbitrage),
}

with open('config.yaml', 'r') as file:
    config = yaml.safe_load(file)

notifier = TelegramNotifier(config['telegram']['bot_token'], config['telegram']['chat_id'])
cache_manager = CacheManager(cache_ttl=600)
history_manager = HistoryManager()
exchange_manager = ExchangeManager(config)

# === –î–æ–¥–∞—î–º–æ WebSocket –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è Bybit ===
latest_prices = {
    'spot': {},
    'linear': {},
}

async def ws_price_update(data, market_type):
    symbol = data["symbol"]
    price = float(data["lastPrice"])
    latest_prices[market_type][symbol] = price

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ü—ñ–Ω–∞ –Ω–∞ —Å–ø–æ—Ç—ñ —Ç–∞ —Ñ‚Äô—é—á–µ—Ä—Å—ñ
    if symbol in latest_prices['spot'] and symbol in latest_prices['linear']:
        spot_price = latest_prices['spot'][symbol]
        futures_price = latest_prices['linear'][symbol]
        diff = abs(futures_price - spot_price) / spot_price * 100

        threshold = config['exchanges']['bybit'].get("arbitrage_difference", 1)
        # –ê–Ω—Ç–∏—Å–ø–∞–º ‚Äì –Ω–µ —Å–ø–∞–º–∏—Ç–∏ –æ–¥–Ω–µ —ñ —Ç–µ —Å–∞–º–µ
        alert_id = f"bybit_ws_{symbol}_{round(diff,2)}"
        if diff >= threshold and history_manager.is_new_top('bybit', alert_id, diff):
            msg = (
                f"üö® <b>LIVE –ê—Ä–±—ñ—Ç—Ä–∞–∂ Bybit</b>:\n"
                f"{symbol}\n"
                f"–°–ø–æ—Ç: <code>{spot_price}</code>\n"
                f"–§‚Äô—é—á–µ—Ä—Å–∏: <code>{futures_price}</code>\n"
                f"–†—ñ–∑–Ω–∏—Ü—è: <b>{diff:.2f}%</b>"
            )
            await notifier.send_message(msg)
            log_info(msg)
            history_manager.save_top('bybit', alert_id, diff)

async def run_bybit_ws():
    bybit_client = exchange_manager.get_active_exchanges().get('bybit')
    if not bybit_client:
        log_info("Bybit WS: –±—ñ—Ä–∂–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")
        return
    # –û—Ç—Ä–∏–º—É—î–º–æ –¢–û–ü-5 –º–æ–Ω–µ—Ç Bybit –∑ —Ñ—ñ–ª—å—Ç—Ä–æ–º –∑–∞ –ª—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—é
    symbols = cache_manager.get_symbols(
        'bybit', bybit_client,
        config['exchanges']['bybit'].get('min_volume', 100000)
    )[:5]
    ws_client = BybitWSClient(symbols, ws_price_update)
    await ws_client.listen()

# === –ö–ª–∞—Å–∏—á–Ω–∏–π —Ü–∏–∫–ª HTTP-–∞—Ä–±—ñ—Ç—Ä–∞–∂—É (—è–∫ —É —Ç–µ–±–µ) ===
async def check_arbitrage():
    enabled_exchanges = [name.capitalize() for name in exchange_manager.get_active_exchanges().keys()]
    start_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
    start_msg = (
        f"üåê –ê—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π –±–æ—Ç v4.0 —É—Å–ø—ñ—à–Ω–æ –ó–ê–ü–£–©–ï–ù–û!\n\n"
        f"üü¢ –ü—Ä–∞—Ü—é—î –¥–ª—è –±—ñ—Ä–∂: <b>{', '.join(enabled_exchanges)}</b>\n"
        f"üîç –ü–æ—à—É–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –º—ñ–∂ —Å–ø–æ—Ç–æ–º, –º–∞—Ä–∂–µ—é —ñ —Ñ‚Äô—é—á–µ—Ä—Å–∞–º–∏ –Ω–∞ –∫—ñ–ª—å–∫–æ—Ö –±—ñ—Ä–∂–∞—Ö.\n"
        f"‚è∞ {start_time}\n\n"
        f"–ë–∞–∂–∞—é –ø—Ä–∏–±—É—Ç–∫–æ–≤–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤! üöÄ"
    )
    await notifier.send_message(start_msg)
    log_info(f"–ê—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π –±–æ—Ç v4.0 –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è –±—ñ—Ä–∂: {', '.join(enabled_exchanges)}")

    try:
        while True:
            print("–ê—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π –±–æ—Ç v4.0 –∑–∞–ø—É—â–µ–Ω–æ, —à—É–∫–∞—é –∞—Ä–±—ñ—Ç—Ä–∞–∂...")

            total_msg = ""
            at_least_one_update = False

            for exch_name, client in exchange_manager.get_active_exchanges().items():
                exch_cfg = exchange_manager.get_config(exch_name)
                arbitrage_funcs = ARBITRAGE_BLOCKS.get(exch_name)
                if not arbitrage_funcs:
                    continue

                symbols = cache_manager.get_symbols(
                    exch_name,
                    client,
                    exch_cfg.get('min_volume', 100000)
                )

                get_spot_arbitrage, get_margin_arbitrage = arbitrage_funcs
                top_spot = await get_spot_arbitrage(client, symbols, config)
                top_margin = await get_margin_arbitrage(client, symbols, config)

                if history_manager.is_new_top(exch_name, 'spot', top_spot) or history_manager.is_new_top(exch_name, 'margin', top_margin):
                    at_least_one_update = True
                    msg = format_exchange_report(exch_name, top_spot, top_margin)
                    total_msg += msg + "\n"
                    history_manager.save_top(exch_name, 'spot', top_spot)
                    history_manager.save_top(exch_name, 'margin', top_margin)
                else:
                    log_info(f"{exch_name.capitalize()}: –¢–æ–ø–∏ –Ω–µ –∑–º—ñ–Ω–∏–ª–∏—Å—è ‚Äî –∞–ª–µ—Ä—Ç –Ω–µ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ")

                await asyncio.sleep(exch_cfg.get('request_interval', config.get('request_interval', 3)))

            if at_least_one_update:
                loud = "SPECIAL ALERT" in total_msg or "‚ö°Ô∏è" in total_msg
                await notifier.send_message(total_msg, loud=loud)
                log_info(total_msg)

    except Exception as e:
        stop_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
        error_msg = (
            f"üåê –ê—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π –±–æ—Ç v4.0 –ó–£–ü–ò–ù–ï–ù–û!\n\n"
            f"üõë –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –≤–∏–º–∫–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É.\n"
            f"‚è∞ {stop_time}\n\n"
            f"–ü–æ–º–∏–ª–∫–∞: {str(e)}"
        )
        await notifier.send_message(error_msg)
        log_info(error_msg)
        raise

    except KeyboardInterrupt:
        stop_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
        stop_msg = (
            f"üåê –ê—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π –±–æ—Ç v4.0 –ó–£–ü–ò–ù–ï–ù–û!\n\n"
            f"üõë –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –≤–∏–º–∫–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É.\n"
            f"‚è∞ {stop_time}\n\n"
            f"–ë–æ—Ç –∫–æ—Ä–µ–∫—Ç–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–æ –∑–∞ –∑–∞–ø–∏—Ç–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."
        )
        await notifier.send_message(stop_msg)
        log_info(stop_msg)

    finally:
        stop_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
        final_msg = (
            f"üåê –ê—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏–π –±–æ—Ç v4.0 –ó–£–ü–ò–ù–ï–ù–û!\n\n"
            f"üõë –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –≤–∏–º–∫–Ω–µ–Ω–æ.\n"
            f"‚è∞ {stop_time}\n\n"
            f"–ü–µ—Ä–µ–≤—ñ—Ä —Ä–æ–±–æ—Ç—É, —è–∫—â–æ –∑—É–ø–∏–Ω–∫–∞ –±—É–ª–∞ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–æ—é!"
        )
        await notifier.send_message(final_msg)
        log_info(final_msg)

# === –ó–∞–ø—É—Å–∫ –æ–¥—Ä–∞–∑—É –¥–≤–æ—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤: HTTP —Ç–∞ WS ===
if __name__ == "__main__":
    async def main():
        await asyncio.gather(
            check_arbitrage(),   # –∫–ª–∞—Å–∏—á–Ω–∏–π —Ü–∏–∫–ª
            run_bybit_ws(),      # WebSocket –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ Bybit
        )
    asyncio.run(main())
