import asyncio
import yaml
import time
from datetime import datetime
from bybit_api import BybitClient
from telegram_bot import TelegramNotifier
from logger import log_info
from arbitrage_blocks import get_spot_futures_arbitrage, get_margin_futures_arbitrage

EXCHANGE_NAME = "Bybit"

with open('config.yaml', 'r') as file:
    config = yaml.safe_load(file)

bybit = BybitClient(config['bybit']['api_key'], config['bybit']['api_secret'])
notifier = TelegramNotifier(config['telegram']['bot_token'], config['telegram']['chat_id'])

symbols_cache = {"symbols": [], "last_update": 0}
cache_ttl = 600  # 10 —Ö–≤–∏–ª–∏–Ω –∫–µ—à—É
prev_top_spot = []
prev_top_margin = []

async def check_arbitrage():
    global prev_top_spot, prev_top_margin

    # –ö—Ä–∞—Å–∏–≤–µ —Å—Ç–∞—Ä—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    start_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
    start_msg = (
        f"üåê –ë—ñ—Ä–∂–∞: {EXCHANGE_NAME}\n\n"
        f"‚úÖ –ë–æ—Ç Bybit Arbitrage —É—Å–ø—ñ—à–Ω–æ –ó–ê–ü–£–©–ï–ù–û!\n\n"
        f"üîç –ü–æ—à—É–∫ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –º—ñ–∂ —Å–ø–æ—Ç–æ–º, –º–∞—Ä–∂–µ—é —ñ —Ñ‚Äô—é—á–µ—Ä—Å–∞–º–∏ —Ä–æ–∑–ø–æ—á–∞—Ç–æ.\n"
        f"‚è∞ {start_time}\n\n"
        f"–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–±—Å—è–≥ —Ç–æ—Ä–≥—ñ–≤ (24h): {config['bybit'].get('min_volume', 100000)} USDT\n"
        f"–ë–∞–∂–∞—é –ø—Ä–∏–±—É—Ç–∫–æ–≤–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤! üöÄ"
    )
    await notifier.send_message(start_msg)
    log_info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")

    try:
        while True:
            print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ, —à—É–∫–∞—é –∞—Ä–±—ñ—Ç—Ä–∞–∂...")

            current_time = time.time()
            if current_time - symbols_cache["last_update"] > cache_ttl or not symbols_cache["symbols"]:
                symbols_cache["symbols"] = bybit.get_spot_symbols(config['bybit'].get('min_volume', 100000))
                symbols_cache["last_update"] = current_time
                log_info(f"–û–Ω–æ–≤–ª–µ–Ω–æ –∫–µ—à —Å–∏–º–≤–æ–ª—ñ–≤ ({len(symbols_cache['symbols'])})")
            symbols = symbols_cache["symbols"]

            # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–ø-5 spot-futures —Ç–∞ margin-futures —á–µ—Ä–µ–∑ –æ–∫—Ä–µ–º—ñ –±–ª–æ–∫–∏
            top_spot = await get_spot_futures_arbitrage(bybit, symbols, config)
            top_margin = await get_margin_futures_arbitrage(bybit, symbols, config)

            msg = f"üåê –ë—ñ—Ä–∂–∞: {EXCHANGE_NAME}\n\n"
            updated = False

            if top_spot and top_spot != prev_top_spot:
                updated = True
            if top_margin and top_margin != prev_top_margin:
                updated = True

            if updated:
                msg += "üö® –¢–û–ü-5 –∞—Ä–±—ñ—Ç—Ä–∞–∂—ñ–≤ –°–ü–û–¢ - –§'–Æ–ß–ï–†–°–ò:\n\n"
                if top_spot:
                    for i, res in enumerate(top_spot, 1):
                        emoji = "üöÄ" if res.get('is_special') else "üíπ"
                        special = "‚ö°Ô∏è <b>SPECIAL ALERT!</b> ‚ö°Ô∏è\n" if res.get('is_special') else ""
                        msg += (
                            f"{emoji} {i}) {res['symbol']}\n"
                            f"   –°–ø–æ—Ç: {res['spot_price']}\n"
                            f"   –§'—é—á–µ—Ä—Å–∏: {res['futures_price']}\n"
                            f"   –†—ñ–∑–Ω–∏—Ü—è: {res['difference']:.2f}%\n"
                            f"{special}"
                            f"   –û–±—Å—è–≥ 24h: {int(res['volume']):,} USDT\n\n"
                        )
                else:
                    msg += "   –ù–µ–º–∞—î –º–æ–Ω–µ—Ç –∑ –∞—Ä–±—ñ—Ç—Ä–∞–∂–µ–º –ø–æ–Ω–∞–¥ –ø–æ—Ä—ñ–≥\n\n"

                msg += f"====================\n"
                msg += f"üö® –¢–û–ü-5 –∞—Ä–±—ñ—Ç—Ä–∞–∂—ñ–≤ –ú–ê–†–ñ–ê - –§'–Æ–ß–ï–†–°–ò:\n\n"
                if top_margin:
                    for i, res in enumerate(top_margin, 1):
                        emoji = "üî•" if res.get('is_special') else "üíπ"
                        special = "‚ö°Ô∏è <b>SPECIAL ALERT!</b> ‚ö°Ô∏è\n" if res.get('is_special') else ""
                        msg += (
                            f"{emoji} {i}) {res['symbol']}\n"
                            f"   –ú–∞—Ä–∂–∞: {res['margin_price']}\n"
                            f"   –§'—é—á–µ—Ä—Å–∏: {res['futures_price']}\n"
                            f"   –†—ñ–∑–Ω–∏—Ü—è: {res['difference']:.2f}%\n"
                            f"{special}"
                            f"   –û–±—Å—è–≥ 24h: {int(res['volume']):,} USDT\n\n"
                        )
                else:
                    msg += "   –ù–µ–º–∞—î –º–æ–Ω–µ—Ç –∑ –∞—Ä–±—ñ—Ç—Ä–∞–∂–µ–º –ø–æ–Ω–∞–¥ –ø–æ—Ä—ñ–≥\n\n"

                # –Ø–∫—â–æ —Å–µ—Ä–µ–¥ —Ç–æ–ø-–∞—Ä–±—ñ—Ç—Ä–∞–∂—ñ–≤ —î SPECIAL, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –≥—É—á–Ω—É –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é
                loud = any(r.get('is_special') for r in top_spot + top_margin)
                await notifier.send_message(msg, loud=loud)
                log_info(msg)
                prev_top_spot = top_spot.copy()
                prev_top_margin = top_margin.copy()
            else:
                log_info("–¢–æ–ø–∏ –Ω–µ –∑–º—ñ–Ω–∏–ª–∏—Å—è ‚Äî –∞–ª–µ—Ä—Ç –Ω–µ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ")

            await asyncio.sleep(config['bybit']['request_interval'])

    except Exception as e:
        stop_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
        error_msg = (
            f"üåê –ë—ñ—Ä–∂–∞: {EXCHANGE_NAME}\n\n"
            f"‚õîÔ∏è –ë–æ—Ç Bybit Arbitrage –ó–£–ü–ò–ù–ï–ù–û!\n\n"
            f"üõë –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –≤–∏–º–∫–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É.\n"
            f"‚è∞ {stop_time}\n\n"
            f"–ü–æ–º–∏–ª–∫–∞: {str(e)}"
        )
        await notifier.send_message(error_msg)
        log_info(error_msg)
        raise

    except KeyboardInterrupt:
        stop_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
        stop_msg = (
            f"üåê –ë—ñ—Ä–∂–∞: {EXCHANGE_NAME}\n\n"
            f"‚õîÔ∏è –ë–æ—Ç Bybit Arbitrage –ó–£–ü–ò–ù–ï–ù–û!\n\n"
            f"üõë –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –≤–∏–º–∫–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É.\n"
            f"‚è∞ {stop_time}\n\n"
            f"–ë–æ—Ç –∫–æ—Ä–µ–∫—Ç–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–æ –∑–∞ –∑–∞–ø–∏—Ç–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."
        )
        await notifier.send_message(stop_msg)
        log_info(stop_msg)

    finally:
        stop_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
        final_msg = (
            f"üåê –ë—ñ—Ä–∂–∞: {EXCHANGE_NAME}\n\n"
            f"‚õîÔ∏è –ë–æ—Ç Bybit Arbitrage –ó–£–ü–ò–ù–ï–ù–û!\n\n"
            f"üõë –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –≤–∏–º–∫–Ω–µ–Ω–æ.\n"
            f"‚è∞ {stop_time}\n\n"
            f"–ü–µ—Ä–µ–≤—ñ—Ä —Ä–æ–±–æ—Ç—É, —è–∫—â–æ –∑—É–ø–∏–Ω–∫–∞ –±—É–ª–∞ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–æ—é!"
        )
        await notifier.send_message(final_msg)
        log_info(final_msg)

if __name__ == "__main__":
    asyncio.run(check_arbitrage())
