import asyncio
import yaml
import time
from bybit_api import BybitClient
from telegram_bot import TelegramNotifier
from logger import log_info

with open('config.yaml', 'r') as file:
    config = yaml.safe_load(file)

bybit = BybitClient(config['bybit']['api_key'], config['bybit']['api_secret'])
notifier = TelegramNotifier(config['telegram']['bot_token'], config['telegram']['chat_id'])

symbols_cache = {"symbols": [], "last_update": 0}
cache_ttl = 600  # 10 —Ö–≤–∏–ª–∏–Ω –∫–µ—à—É
prev_top = []

async def check_arbitrage():
    global prev_top

    # –°—Ç–∞—Ä—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    start_msg = "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ, —à—É–∫–∞—é –∞—Ä–±—ñ—Ç—Ä–∞–∂..."
    await notifier.send_message(start_msg)
    log_info(start_msg)

    try:
        while True:
            print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ, —à—É–∫–∞—é –∞—Ä–±—ñ—Ç—Ä–∞–∂...")

            current_time = time.time()
            if current_time - symbols_cache["last_update"] > cache_ttl or not symbols_cache["symbols"]:
                symbols_cache["symbols"] = bybit.get_spot_symbols()
                symbols_cache["last_update"] = current_time
                log_info(f"–û–Ω–æ–≤–ª–µ–Ω–æ –∫–µ—à —Å–∏–º–≤–æ–ª—ñ–≤ ({len(symbols_cache['symbols'])})")
            symbols = symbols_cache["symbols"]

            results = []

            for symbol in symbols:
                spot_price = bybit.get_price(symbol, category="spot")
                futures_price = bybit.get_price(symbol, category="linear")

                if spot_price and futures_price:
                    difference = abs(futures_price - spot_price) / spot_price * 100
                    if difference >= config['bybit']['arbitrage_difference']:
                        results.append({
                            "symbol": symbol,
                            "spot_price": spot_price,
                            "futures_price": futures_price,
                            "difference": difference
                        })
                await asyncio.sleep(0.1)

            top_results = sorted(results, key=lambda x: x['difference'], reverse=True)[:5]

            if top_results and top_results != prev_top:
                msg = "üö® –¢–û–ü-5 –∞—Ä–±—ñ—Ç—Ä–∞–∂–Ω–∏—Ö –º–æ–Ω–µ—Ç –Ω–∞ Bybit:\n\n"
                for i, res in enumerate(top_results, start=1):
                    msg += (
                        f"{i}) {res['symbol']}\n"
                        f"   –°–ø–æ—Ç: {res['spot_price']}\n"
                        f"   –§'—é—á–µ—Ä—Å–∏: {res['futures_price']}\n"
                        f"   –†—ñ–∑–Ω–∏—Ü—è: {res['difference']:.2f}%\n\n"
                    )
                await notifier.send_message(msg)
                log_info(msg)
                prev_top = top_results.copy()
            elif not top_results:
                log_info("–ù–µ–º–∞—î –º–æ–Ω–µ—Ç —ñ–∑ –∞—Ä–±—ñ—Ç—Ä–∞–∂–µ–º –ø–æ–Ω–∞–¥ –ø–æ—Ä—ñ–≥")
                prev_top = []
            else:
                log_info("–¢–æ–ø-5 –Ω–µ –∑–º—ñ–Ω–∏–≤—Å—è ‚Äî –∞–ª–µ—Ä—Ç –Ω–µ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ")

            await asyncio.sleep(config['bybit']['request_interval'])

    except Exception as e:
        # –û–±—Ä–æ–±–ª—è—î–º–æ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω—É –ø–æ–º–∏–ª–∫—É
        error_msg = f"–ë–æ—Ç –∞–≤–∞—Ä—ñ–π–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–æ: {str(e)}"
        await notifier.send_message(error_msg)
        log_info(error_msg)
        raise

    except KeyboardInterrupt:
        # –Ø–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ Ctrl+C ‚Äî –æ–±—Ä–æ–±–ª—è—î–º–æ –∑—É–ø–∏–Ω–∫—É –≤—Ä—É—á–Ω—É
        stop_msg = "–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ"
        await notifier.send_message(stop_msg)
        log_info(stop_msg)

    finally:
        # –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ
        stop_msg = "–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ"
        await notifier.send_message(stop_msg)
        log_info(stop_msg)

if __name__ == "__main__":
    asyncio.run(check_arbitrage())
